import java.util.Scanner; 
 
 
public class PlayfairCipher 
 { 
    private String key; 
 
    private char[][] matrix; 
 
   
  public PlayfairCipher(String key) 
 { 
        this.key = key; 
       
  this.matrix = generateMatrix(); 
   
  } 
 
 
    private char[][] generateMatrix() 
 { 
        char[][] matrix = new char[5][5]; 
 
        boolean[] used = new boolean[26]; 
   
      int row = 0, col = 0; 
 
        // Fill matrix with the key 
 
        for (char c : key.toUpperCase().toCharArray())  
{ 
            if (c == 'J') c = 'I'; // Treat I and J as the same 
 
            if (!used[c - 'A'])  
{ 
                matrix[row][col] = c; 
 
                used[c - 'A'] = true; 
      
           col++; 
           
      if (col == 5) 
 { 
                    col = 0; 
    
                 row++; 
  
               } 
            } 
        } 
 
  
       // Fill the remaining matrix with the unused letters 
        
 for (char c = 'A'; c <= 'Z'; c++) 
 { 
            if (c != 'J' && !used[c - 'A'])  
{ 
                matrix[row][col] = c; 
   
              col++; 
              
   if (col == 5) 
 { 
                    col = 0; 
      
               row++; 
        
         } 
            } 
        } 
 
    
     return matrix; 
    } 
 
    
 
 private String prepareText(String text)  
{ 
        // Remove non-alphabetic characters and convert to uppercase 
         
return text.replaceAll("[^A-Za-z]", "").toUpperCase(); 
   
  } 
 
  
   private String digraphEncryption(String digraph)  
{ 
         
char a = digraph.charAt(0); 
     
    char b = digraph.charAt(1); 
  
       int row1 = -1, col1 = -1, row2 = -1, col2 = -1; 
 
    
     // Find positions of the two letters in the matrix 
        
 
 for (int i = 0; i < 5; i++) 
 { 
            for (int j = 0; j < 5; j++) 
 { 
                if (matrix[i][j] == a) 
 { 
                    row1 = i; 
      
               col1 = j; 
                } 
  
               if (matrix[i][j] == b)  
{ 
                    row2 = i; 
 
                    col2 = j; 
     
            } 
            } 
        } 
 
    
     // Handle different cases: same row, same column, rectangle 
   
      if (row1 == row2) 
 { 
            col1 = (col1 + 1) % 5; 
    
         col2 = (col2 + 1) % 5; 
     
    } 
 else if (col1 == col2) 
 { 
            row1 = (row1 + 1) % 5; 
  
           row2 = (row2 + 1) % 5; 
   
      } 
 
 else { 
            int temp = col1; 
        
     col1 = col2; 
        
     col2 = temp; 
        } 
 
   
      return String.valueOf(matrix[row1][col1]) + String.valueOf(matrix[row2][col2]); 
    } 
 
  
   public String encrypt(String text) 
 { 
        text = prepareText(text); 
   
      StringBuilder encryptedText = new StringBuilder(); 
 
  
       for (int i = 0; i < text.length(); i += 2) 
 { 
            if (i == text.length() - 1)  
{ 
                encryptedText.append(text.charAt(i)).append('X'); 
            } 
 else if (text.charAt(i) == text.charAt(i + 1))  
{ 
                encryptedText.append(text.charAt(i)).append('X'); 
  
               i--; 
            } 
 else { 
                encryptedText.append(digraphEncryption(text.substring(i, i + 2))); 
            } 
        } 
 
  
       return encryptedText.toString(); 
    } 
 
   
  
 public static void main(String[] args)  
{ 
      
   Scanner scanner = new Scanner(System.in); 
 
  
       System.out.print("Enter the key: "); 
    
     String key = scanner.nextLine(); 
 
   
      PlayfairCipher playfairCipher = new PlayfairCipher(key); 
 
   
      System.out.print("Enter the text to encrypt: "); 
      
   String plainText = scanner.nextLine(); 
 
      
   String encryptedText = playfairCipher.encrypt(plainText); 
       
  System.out.println("Encrypted text: " + encryptedText); 
 
    
     scanner.close(); 
    } 
} 
 

